{
	"info": {
		"_postman_id": "59834fe3-3529-4d3a-b6c8-c1b949a65a28",
		"name": "MicroCommerce",
		"description": "You may not use, modify, or distribute any part of the code or project without **explicit written permission** from the project owner, Damian PÄ…gowski",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40115716"
	},
	"item": [
		{
			"name": "Get Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"});",
							"",
							"pm.test(\"Response array length is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.be.above(0);",
							"});",
							"",
							"const schema = {",
							"    type: \"array\",",
							"    items: {",
							"        type: \"object\",",
							"        required: [\"_id\", \"name\", \"image\", \"description\", \"rating\", \"price\", \"productId\", \"category\", \"subcategory\", \"badges\"],",
							"        properties: {",
							"            _id: { type: \"string\" },",
							"            name: { type: \"string\" },",
							"            image: { type: \"string\" },",
							"            description: { type: \"string\" },",
							"            rating: { type: \"number\", minimum: 0, maximum: 5 },",
							"            price: { type: \"number\", minimum: 0 },",
							"            productId: { type: \"number\" },",
							"            category: { type: \"string\" },",
							"            subcategory: { type: \"string\" },",
							"            badges: { ",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"            },",
							"        },",
							"    },",
							"};",
							"",
							"pm.test(\"Response matches JSON schema\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"First product has valid rating\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].rating).to.be.within(0, 5);",
							"});",
							"",
							"pm.test(\"All products have a category\", function () {",
							"    const jsonData = pm.response.json();",
							"    jsonData.forEach((product) => {",
							"        pm.expect(product).to.have.property(\"category\").that.is.a(\"string\");",
							"    });",
							"});",
							"",
							"pm.test(\"All products have a description and an image\", function () {",
							"    const jsonData = pm.response.json();",
							"    jsonData.forEach((product) => {",
							"        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\").and.not.empty;",
							"        pm.expect(product).to.have.property(\"image\").that.is.a(\"string\").and.not.empty;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3034/products",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3034",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    required: [\"name\", \"image\", \"description\", \"rating\", \"price\", \"productId\", \"category\", \"subcategory\", \"badges\"],",
							"    properties: {",
							"        name: { type: \"string\" },",
							"        image: { type: \"string\" },",
							"        description: { type: \"string\" },",
							"        rating: { type: \"number\", minimum: 0, maximum: 5 },",
							"        price: { type: \"number\", minimum: 0 },",
							"        productId: { type: \"number\", minimum: 0 },",
							"        category: { type: \"string\" },",
							"        subcategory: { type: \"string\" },",
							"        badges: { ",
							"            type: \"array\",",
							"            items: { type: \"string\" }",
							"        },",
							"    },",
							"};",
							"",
							"pm.test(\"Response matches JSON schema\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3034/products/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3034",
					"path": [
						"products",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Inventory",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has all required fields\", function () {",
							"    pm.expect(jsonData).to.have.property(\"productId\").that.is.a(\"number\").and.to.be.above(0);",
							"    pm.expect(jsonData).to.have.property(\"quantity\").that.is.a(\"number\").and.to.be.above(0);",
							"});",
							"",
							"pm.test(\"Product ID is correct\", function () {",
							"    pm.expect(jsonData.productId).to.eql(2);",
							"});",
							"",
							"pm.test(\"Quantity is valid\", function () {",
							"    pm.expect(jsonData.quantity).to.be.above(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3031/inventory/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3031",
					"path": [
						"inventory",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Inventory with Invalid Product ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has all required fields\", function () {",
							"    pm.expect(jsonData).to.have.property(\"statusCode\").that.equals(404);",
							"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\").and.not.empty;",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Inventory for product 666 not found\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3031/inventory/666",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3031",
					"path": [
						"inventory",
						"666"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has all required fields\", function () {",
							"    pm.expect(jsonData).to.have.property(\"username\").that.is.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"token\").that.is.a(\"string\").and.not.empty;",
							"    pm.environment.set(\"TOKEN\", jsonData.token);",
							"",
							"});",
							"",
							"const username = pm.environment.get(\"U_NAME\");",
							"const email = `${username}@example.com`;",
							"",
							"pm.test(\"Username is valid\", function () {",
							"    pm.expect(jsonData.username).to.eql(username);",
							"});",
							"",
							"pm.test(\"Email is valid\", function () {",
							"    pm.expect(jsonData.email).to.eql(email);",
							"});",
							"",
							"pm.test(\"Token is valid\", function () {",
							"    pm.expect(jsonData.token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/); // JWT format validation",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{U_NAME}}\",\n    \"email\": \"{{U_NAME}}@example.com\",\n    \"password\": \"{{U_PASSWORD}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3035/users/register",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3035",
					"path": [
						"users",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User Already Existing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has all required fields\", function () {",
							"    pm.expect(jsonData).to.have.property(\"statusCode\").that.equals(400);",
							"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"details\").that.is.an(\"array\").and.not.empty;",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Username or email already exists\");",
							"});",
							"",
							"pm.test(\"Details contain expected fields\", function () {",
							"    pm.expect(jsonData.details).to.include.members([\"username\", \"email\"]);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{U_NAME}}\",\n    \"email\": \"{{U_NAME}}@example.com\",\n    \"password\": \"{{U_PASSWORD}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3035/users/register",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3035",
					"path": [
						"users",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"const username = pm.environment.get(\"U_NAME\");",
							"const email = `${username}@example.com`;",
							"",
							"pm.test(\"Response has all required fields\", function () {",
							"    pm.expect(jsonData).to.have.property(\"username\").that.is.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"token\").that.is.a(\"string\").and.not.empty;",
							"    pm.environment.set(\"TOKEN\", jsonData.token);",
							"",
							"});",
							"",
							"pm.test(\"Username is valid\", function () {",
							"    pm.expect(jsonData.username).to.eql(username);",
							"});",
							"",
							"pm.test(\"Email is valid\", function () {",
							"    pm.expect(jsonData.email).to.eql(email);",
							"});",
							"",
							"pm.test(\"Token is valid\", function () {",
							"    pm.expect(jsonData.token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{U_NAME}}\",\n    \"password\": \"{{U_PASSWORD}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3035/users/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3035",
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with Invalid Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has all required fields\", function () {",
							"    pm.expect(jsonData).to.have.property(\"statusCode\").that.equals(401);",
							"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\").and.not.empty;",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Invalid username or password\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{U_NAME}}\",\n    \"password\": \"abc\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3035/users/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3035",
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has all required fields\", function () {",
							"    pm.expect(jsonData).to.have.property(\"username\").that.is.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"role\").that.is.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"createdAt\").that.is.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\").that.is.a(\"string\").and.not.empty;",
							"});",
							"",
							"const username = pm.environment.get(\"U_NAME\");",
							"const email = `${username}@example.com`;",
							"",
							"pm.test(\"Username is valid\", function () {",
							"    pm.expect(jsonData.username).to.eql(username);",
							"});",
							"",
							"pm.test(\"Email is valid\", function () {",
							"    pm.expect(jsonData.email).to.eql(email);",
							"});",
							"",
							"pm.test(\"Role is valid\", function () {",
							"    pm.expect(jsonData.role).to.eql(\"user\");",
							"});",
							"",
							"pm.test(\"CreatedAt and UpdatedAt are valid ISO date strings\", function () {",
							"    pm.expect(new Date(jsonData.createdAt).toISOString()).to.eql(jsonData.createdAt);",
							"    pm.expect(new Date(jsonData.updatedAt).toISOString()).to.eql(jsonData.updatedAt);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{U_NAME}}\",\n    \"password\": \"{{U_PASSWORD}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3035/users/me",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3035",
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Checkout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    required: [\"success\", \"order\"],",
							"    properties: {",
							"        success: { type: \"boolean\" },",
							"        order: {",
							"            type: \"object\",",
							"            required: [\"username\", \"items\", \"totalPrice\", \"status\", \"_id\", \"createdAt\", \"updatedAt\", \"__v\"],",
							"            properties: {",
							"                username: { type: \"string\" },",
							"                items: {",
							"                    type: \"array\",",
							"                    items: {",
							"                        type: \"object\",",
							"                        required: [\"productId\", \"name\", \"quantity\", \"price\", \"_id\"],",
							"                        properties: {",
							"                            productId: { type: \"number\" },",
							"                            name: { type: \"string\" },",
							"                            quantity: { type: \"number\" },",
							"                            price: { type: \"number\" },",
							"                            _id: { type: \"string\" }",
							"                        }",
							"                    }",
							"                },",
							"                totalPrice: { type: \"number\" },",
							"                status: { type: \"string\" },",
							"                _id: { type: \"string\" },",
							"                createdAt: { type: \"string\", format: \"date-time\" },",
							"                updatedAt: { type: \"string\", format: \"date-time\" },",
							"                __v: { type: \"number\" }",
							"            }",
							"        }",
							"    }",
							"};",
							"",
							"pm.test(\"Response matches JSON schema\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"    pm.environment.set(\"ORDER_REF\", jsonData.order._id);",
							"",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"items\": [\n    { \"productId\": 1, \"quantity\":   1 },\n    { \"productId\": 3, \"quantity\": 1 }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3032/orders",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3032",
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Checkout Non-Existent Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    required: [\"statusCode\", \"message\", \"details\"],",
							"    properties: {",
							"        statusCode: { type: \"number\" },",
							"        message: { type: \"string\" },",
							"        details: { type: \"array\" }",
							"    }",
							"};",
							"",
							"pm.test(\"Response matches JSON schema\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Product 666 not found in cache\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"items\": [\n    { \"productId\": 666, \"quantity\":   1 },\n    { \"productId\": 3, \"quantity\": 1 }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3032/orders",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3032",
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    required: [\"status\", \"paymentId\", \"orderId\"],",
							"    properties: {",
							"        status: { type: \"string\", enum: [\"success\"] },",
							"        paymentId: { type: \"string\" },",
							"        orderId: { type: \"string\" }",
							"    }",
							"};",
							"",
							"pm.test(\"Response matches JSON schema\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData).to.have.property('paymentId');",
							"    pm.expect(jsonData).to.have.property('orderId');",
							"    pm.expect(jsonData.status).to.be.a('string').and.to.equal('success');",
							"});",
							"",
							"pm.test(\"Order ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    const expectedOrderId = pm.variables.get(\"ORDER_REF\");",
							"    pm.expect(jsonData.orderId).to.eql(expectedOrderId);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.environment.get(\"TOKEN\");",
							"",
							"const order = {",
							"    \"items\": [",
							"        { \"productId\": 1, \"quantity\": 1 },",
							"        { \"productId\": 3, \"quantity\": 1 }",
							"    ]",
							"};",
							"",
							"const req = {",
							"    url: `http://127.0.0.1:3032/orders`,",
							"    method: 'POST',",
							"    header: {",
							"        'Authorization': `Bearer ${token}`,",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(order),",
							"    },",
							"};",
							"",
							"pm.sendRequest(req, function (err, response) {",
							"    pm.test(\"GET request is successful\", function () {",
							"        pm.expect(response).to.have.property('code', 201);",
							"        const orderRef = response.json().order._id;",
							"        pm.environment.set(\"ORDER_REF\", orderRef);",
							"    });",
							"",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"orderId\": \"{{ORDER_REF}}\",\n  \"amount\": 3099.98,\n  \"currency\": \"EUR\",\n  \"cardDetails\": {\n    \"name\": \"John Doe\",\n    \"cardNumber\": \"4111111111111111\",\n    \"expiryDate\": \"12/26\",\n    \"cvv\": \"123\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3033/payments",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3033",
					"path": [
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment - Insufficient Funds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the typo in headers to header",
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    required: [\"status\", \"reason\", \"orderId\"],",
							"    properties: {",
							"        status: { type: \"string\", enum: [\"rejected\"] },",
							"        reason: { type: \"string\" },",
							"        orderId: { type: \"string\" }",
							"    }",
							"};",
							"",
							"pm.test(\"Response matches JSON schema\", function () {",
							"    const jsonData = pm.response.json();",
							"    console.log(jsonData.orderId)",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Reason is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.reason).to.eql(\"Insufficient funds\");",
							"});",
							"",
							"",
							"// Make a follow-up GET request and check order status",
							"const delay = (ms, callback) => {",
							"    setTimeout(callback, ms);",
							"};",
							"",
							"// Delay by 1000ms",
							"delay(1000, function () {",
							"    const orderRef = pm.response.json().orderId;",
							"    pm.environment.set(\"ORDER_REF\", orderRef);",
							"    const token = pm.environment.get(\"TOKEN\");",
							"",
							"    const req = {",
							"        url: `http://127.0.0.1:3032/orders/${orderRef}`,",
							"        method: 'GET',",
							"        header: {",
							"            'Authorization': `Bearer ${token}`",
							"        }",
							"    };",
							"",
							"    pm.sendRequest(req, function (err, response) {",
							"        if (err) {",
							"            console.error(\"Request failed:\", err);",
							"        } else {",
							"            pm.test(\"GET request is successful\", function () {",
							"                pm.expect(response).to.have.property('code', 200);",
							"            });",
							"",
							"            pm.test(\"Order status is 'failed' because of insufficient funds\", function () {",
							"                const jsonResponse = response.json();",
							"                pm.expect(jsonResponse.order.status).to.eql(\"failed\");",
							"                pm.expect(jsonResponse.order.failureReason).to.eql(\"Insufficient funds\");",
							"            });",
							"        }",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.environment.get(\"TOKEN\");",
							"",
							"const order = {",
							"    \"items\": [",
							"        { \"productId\": 1, \"quantity\": 1 },",
							"        { \"productId\": 3, \"quantity\": 1 }",
							"    ]",
							"};",
							"",
							"const req = {",
							"    url: `http://127.0.0.1:3032/orders`,",
							"    method: 'POST',",
							"    header: {",
							"        'Authorization': `Bearer ${token}`,",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(order),",
							"    },",
							"};",
							"",
							"pm.sendRequest(req, function (err, response) {",
							"    pm.test(\"GET request is successful\", function () {",
							"        pm.expect(response).to.have.property('code', 201);",
							"        const orderRef = response.json().order._id;",
							"        pm.environment.set(\"ORDER_REF\", orderRef);",
							"        console.log(orderRef)",
							"",
							"    });",
							"",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"orderId\": \"{{ORDER_REF}}\",\n  \"amount\": 3099.98,\n  \"currency\": \"EUR\",\n  \"cardDetails\": {\n    \"name\": \"Broke User\",\n    \"cardNumber\": \"4111111111111111\",\n    \"expiryDate\": \"12/26\",\n    \"cvv\": \"123\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3033/payments",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3033",
					"path": [
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment - Amount Incorrect",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    required: [\"status\", \"paymentId\", \"orderId\"],",
							"    properties: {",
							"        status: { type: \"string\", enum: [\"success\"] },",
							"        paymentId: { type: \"string\" },",
							"        orderId: { type: \"string\" }",
							"    }",
							"};",
							"",
							"pm.test(\"Response matches JSON schema\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Order ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    const expectedOrderId = pm.variables.get(\"ORDER_REF\");",
							"    pm.expect(jsonData.orderId).to.eql(expectedOrderId);",
							"});",
							"",
							"// Make a follow-up GET request and check order status",
							"const delay = (ms, callback) => {",
							"    setTimeout(callback, ms);",
							"};",
							"",
							"// Delay by 1000ms",
							"delay(1000, function () {",
							"    const orderRef = pm.response.json().orderId;",
							"    pm.environment.set(\"ORDER_REF\", orderRef);",
							"    const token = pm.environment.get(\"TOKEN\");",
							"",
							"    const req = {",
							"        url: `http://127.0.0.1:3032/orders/${orderRef}`,",
							"        method: 'GET',",
							"        header: {",
							"            'Authorization': `Bearer ${token}`",
							"        }",
							"    };",
							"",
							"    pm.sendRequest(req, function (err, response) {",
							"        if (err) {",
							"            console.error(\"Request failed:\", err);",
							"        } else {",
							"            pm.test(\"GET request is successful\", function () {",
							"                pm.expect(response).to.have.property('code', 200);",
							"            });",
							"",
							"            pm.test(\"Order status is 'failed' because of insufficient funds\", function () {",
							"                pm.expect(response.json().order.status).to.eql(\"failed\");",
							"                pm.expect(response.json().order.failureReason).to.eql(\"Insufficient payment. Paid: 12.12 EUR, Expected: 3099.98 EUR\");",
							"            });",
							"        }",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.environment.get(\"TOKEN\");",
							"",
							"const order = {",
							"    \"items\": [",
							"        { \"productId\": 1, \"quantity\": 1 },",
							"        { \"productId\": 3, \"quantity\": 1 }",
							"    ]",
							"};",
							"",
							"const req = {",
							"    url: `http://127.0.0.1:3032/orders`,",
							"    method: 'POST',",
							"    header: {",
							"        'Authorization': `Bearer ${token}`,",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(order),",
							"    },",
							"};",
							"",
							"",
							"pm.sendRequest(req, function (err, response) {",
							"    pm.test(\"GET request is successful\", function () {",
							"        pm.expect(response).to.have.property('code', 201);",
							"        const orderRef = response.json().order._id;",
							"        pm.environment.set(\"ORDER_REF\", orderRef);",
							"    });",
							"",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"orderId\": \"{{ORDER_REF}}\",\n  \"amount\": 12.12,\n  \"currency\": \"EUR\",\n  \"cardDetails\": {\n    \"name\": \"John Doe\",\n    \"cardNumber\": \"4111111111111111\",\n    \"expiryDate\": \"12/26\",\n    \"cvv\": \"123\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3033/payments",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3033",
					"path": [
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment - Currency Incorrect",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    required: [\"status\", \"paymentId\", \"orderId\"],",
							"    properties: {",
							"        status: { type: \"string\", enum: [\"success\"] },",
							"        paymentId: { type: \"string\" },",
							"        orderId: { type: \"string\" }",
							"    }",
							"};",
							"",
							"pm.test(\"Response matches JSON schema\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Order ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    const expectedOrderId = pm.variables.get(\"ORDER_REF\");",
							"    pm.expect(jsonData.orderId).to.eql(expectedOrderId);",
							"});",
							"",
							"// Make a follow-up GET request and check order status",
							"const delay = (ms, callback) => {",
							"    setTimeout(callback, ms);",
							"};",
							"",
							"// Delay by 1000ms",
							"delay(1000, function () {",
							"    const orderRef = pm.response.json().orderId;",
							"    pm.environment.set(\"ORDER_REF\", orderRef);",
							"    const token = pm.environment.get(\"TOKEN\");",
							"",
							"    const req = {",
							"        url: `http://127.0.0.1:3032/orders/${orderRef}`,",
							"        method: 'GET',",
							"        header: {",
							"            'Authorization': `Bearer ${token}`",
							"        }",
							"    };",
							"",
							"    pm.sendRequest(req, function (err, response) {",
							"        if (err) {",
							"            console.error(\"Request failed:\", err);",
							"        } else {",
							"            pm.test(\"GET request is successful\", function () {",
							"                pm.expect(response).to.have.property('code', 200);",
							"            });",
							"",
							"",
							"            pm.test(\"Order status is 'failed' because of insufficient funds\", function () {",
							"                pm.expect(response.json().order.status).to.eql(\"failed\");",
							"                pm.expect(response.json().order.failureReason).to.eql(\"Insufficient payment. Paid: 3099.98 USD, Expected: 3099.98 EUR\");",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"orderId\": \"{{ORDER_REF}}\",\n  \"amount\": 3099.98,\n  \"currency\": \"USD\",\n  \"cardDetails\": {\n    \"name\": \"John Doe\",\n    \"cardNumber\": \"4111111111111111\",\n    \"expiryDate\": \"12/26\",\n    \"cvv\": \"123\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3033/payments",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3033",
					"path": [
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order By Ref",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    required: [\"success\", \"order\"],",
							"    properties: {",
							"        success: { type: \"boolean\" },",
							"        order: {",
							"            type: \"object\",",
							"            required: [",
							"                \"_id\", \"username\", \"items\", \"totalPrice\", \"status\", ",
							"                \"createdAt\", \"updatedAt\", \"__v\"",
							"            ],",
							"            properties: {",
							"                _id: { type: \"string\" },",
							"                username: { type: \"string\" },",
							"                items: {",
							"                    type: \"array\",",
							"                    items: {",
							"                        type: \"object\",",
							"                        required: [\"productId\", \"name\", \"quantity\", \"price\", \"_id\"],",
							"                        properties: {",
							"                            productId: { type: \"number\" },",
							"                            name: { type: \"string\" },",
							"                            quantity: { type: \"number\" },",
							"                            price: { type: \"number\" },",
							"                            _id: { type: \"string\" }",
							"                        }",
							"                    }",
							"                },",
							"                totalPrice: { type: \"number\" },",
							"                status: { type: \"string\", enum: [\"failed\"] },",
							"                createdAt: { type: \"string\", format: \"date-time\" },",
							"                updatedAt: { type: \"string\", format: \"date-time\" },",
							"                __v: { type: \"number\" },",
							"                failureReason: { type: \"string\" }",
							"            },",
							"            additionalProperties: true ",
							"        }",
							"    }",
							"};",
							"",
							"pm.test(\"Response matches JSON schema\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"items\": [\n    { \"productId\": 1, \"quantity\": 2 },\n    { \"productId\": 3, \"quantity\": 1 }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3032/orders/{{ORDER_REF}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3032",
					"path": [
						"orders",
						"{{ORDER_REF}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has all required fields\", function () {",
							"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\").and.not.empty;",
							"});",
							"",
							"pm.test(\"Success message is correct\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"User deleted successfully\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3035/users/me",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3035",
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		}
	]
}